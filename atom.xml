<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wanglijun</title>
  <subtitle>Android Developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-12T13:57:42.266Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王丽君</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一步步教你使用Hexo配合github搭建个人主页</title>
    <link href="http://yoursite.com/2016/08/09/%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Hexo%E9%85%8D%E5%90%88github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/"/>
    <id>http://yoursite.com/2016/08/09/一步步教你使用Hexo配合github搭建个人主页/</id>
    <published>2016-08-09T00:55:08.000Z</published>
    <updated>2016-08-12T13:57:42.266Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>如今可谓是全民编程时代，生活在北上广这样的城市里，感觉每天遇见的每一个背电脑包的都像是个程序员，那么多程序员，如果自己没有什么优势的话，很快你就会被这个时代所抛弃，有一个自己的博客，记录自己工作中遇到的问题，总结自己的工作，不论是以后找工作，还是复习之前的知识，博客记录都是一种很好的方式，那你可能会说了，不是有csdn、开源中国、简书等等，可是这些都太普通了，作为程序员的我们，怎么能没有自己的博客呢。<br>那么我今天以我的个人博客搭建为例(<a href="http://www.wanglijun.vip" target="_blank" rel="external">http://www.wanglijun.vip</a>) 教大家一步步搭建好自己的博客。</p>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><ul>
<li>你要有一台电脑</li>
<li>git (本文以win系统为例)</li>
<li>node.js</li>
<li>Hexo</li>
<li>github账号（作为域名的服务器）</li>
<li>域名（当然要申请一个有意义的域名，阿里云的必须要实名认证，我第一次就是因为没有实名，失败了）</li>
</ul>
<hr>
<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><blockquote>
<p>git我们在win下没有命令端，所以我们要装两个软件，就是下面图片中的，大家可以去网上随便下载，这里就不提供下载链接了。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2659145-30f79ed1d12d6318.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git安装软件"></p>
<blockquote>
<p>上面这两个软件的安装方式都是傻瓜式安装，一路下一步就行了，那么安装完我们怎么知道是否安装成功呢，在桌面任意位置，或者文件夹上鼠标右键，出现下图说明安装成功。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2659145-54be4b05055f3ce3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git安装成功图"></p>
<hr>
<h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><blockquote>
<p>node下载链接<a href="https://nodejs.org/en/download/" target="_blank" rel="external">https://nodejs.org/en/download/</a>, 至于下载哪一个不用担心，下图有，安装方式也是傻瓜式的安装，直接一路下一步就行，node体积很小，只有大概十兆左右。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2659145-8d4303b712b68568.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="node下载图片"></p>
<blockquote>
<p>我的是win10 64位系统，大家根据自己系统情况选择下载。那么安装完了我们怎么能验证node是否安装成功呢！别急，看下图</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2659145-aec027fd3c6f671a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="node安装成功图"></p>
<blockquote>
<p>win键 + R键，dos命令窗口输入node -v，出现node版本号说明我们node已经安装成功了。</p>
</blockquote>
<hr>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><blockquote>
<p>上面git node 都已经安装成功了，开始安装Hexo,Hexo的安装方式是使用命令行的形式，直接在桌面或者文件夹任意位置右键，选git bash ,在出现的窗口中输入下面命令。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo -g</div></pre></td></tr></table></figure>
<blockquote>
<p>-g表示全局安装, npm默认为当前项目安装,npm在新版的node中就包含了，如过想验证之前安装node时候，是否npm安装成功，也是用验证版本号的方式，在dos命令窗口输入 npm -v.<br>等这个命令执行完后，我们在电脑的任意盘符新建一个文件夹，名字随意起，一般命名为Hexo,然后在新建的文件夹中邮件选git bash ，<code>依次</code>输入下面命令，安装Hexo.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init  </div><div class="line">hexo g</div><div class="line">hexo s</div></pre></td></tr></table></figure>
<blockquote>
<p>init 初始化hexo到你指定的目录<br>g 自动根据当前目录下文件,生成静态网页<br>server 运行本地服务<br>出现下面一行，说明本地服务运行成功。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INFO Hexo is running at http:<span class="comment">//0.0.0.0:4000/. Press Ctrl+C to stop.</span></div></pre></td></tr></table></figure>
<blockquote>
<p>接着在浏览器输入<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000</a>就可以看到效果。<br>本地服务退出方式为 ctrl + c 组合键。<br>在本地看到的样子应该是如下图。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2659145-31a97294d57e3175.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hexo部署成功图，图片来源网络"></p>
<blockquote>
<p>好了，看到这个页面，就说明我们本地的静态页面已经创建成功了，接下来要做的就是创建github仓库<br>本地ssh链接github账号<br>域名绑定github仓库</p>
</blockquote>
<hr>
<h2 id="创建github账号及仓库"><a href="#创建github账号及仓库" class="headerlink" title="创建github账号及仓库"></a>创建github账号及仓库</h2><h3 id="git仓库"><a href="#git仓库" class="headerlink" title="git仓库"></a>git仓库</h3><blockquote>
<p>github账号用邮箱注册，网站：<a href="http://www.github.com，" target="_blank" rel="external">http://www.github.com，</a> git仓库名字也是有一定规则的，假如你github账号名字为wljdev,那么你创建这个仓库的名字就必须是：wljdev.github.io,(很多教程博客里面会让你们再创建一个页面，我觉着这是完全没有必要的，因为这些页面是我们用hexo从本地上传的，如果这个时候创建页面是没有意义的，)，这个时候我们仓库是空的，记住是空的，里面什么都不要写。<br>仓库创建为下图就算结束</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2659145-d43ac141a928b497.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git仓库创建图，图片来源网络"></p>
<h3 id="创建本地ssh-key"><a href="#创建本地ssh-key" class="headerlink" title="创建本地ssh key"></a>创建本地ssh key</h3><blockquote>
<p>检验本地是否已存在key<br>桌面右键，选择git bash ，依次输入命令 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~</div><div class="line">cd .ssh</div><div class="line">ls</div></pre></td></tr></table></figure>
<blockquote>
<p>存在key的话都会显示id_rsa.pub和id_dsa.pub这两个文件没有key什么都不会显示</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"your_email@mail.com"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>引号中输入的是你的邮箱，这里会提示输入一个文件名来保存ssh key也可以什么都不输入，使用默认的id_rsa.pub和id_dsa.pub回车之后需要输入两次密码：密码我们如果放心的话直接回车，就是没有密码，这样简单。</p>
</blockquote>
<h3 id="githu关联key"><a href="#githu关联key" class="headerlink" title="githu关联key"></a>githu关联key</h3><blockquote>
<p>登录Github-&gt;Settings-&gt;SSH keys-&gt;Add SSH key<br>打开本地id_rsa.pub文件（注意：不是id_rsa文件），复制所有内容<br>将复制的内容粘贴到刚刚那个页面的key对应的文本框里面,title随便<br>最后输入：ssh -T git@github.com 回车输入密码，会提示是否设置成功！</p>
</blockquote>
<h3 id="本地站点配置"><a href="#本地站点配置" class="headerlink" title="本地站点配置"></a>本地站点配置</h3><blockquote>
<p>进入到本地创建的Hexo 文件夹中，打开Hexo目录下的_config.xml文件，用文本方式打开，直接拉到最下面找到，修改为如下样式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy: </div><div class="line">  type: git </div><div class="line">  repository: git<span class="meta">@github</span>.com:wljdev/wljdev.github.io.git  </div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<h3 id="测试、提交到仓库"><a href="#测试、提交到仓库" class="headerlink" title="测试、提交到仓库"></a>测试、提交到仓库</h3><blockquote>
<p>还是右键选择git bash ,依次输入下面命令</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo s --debug</div></pre></td></tr></table></figure>
<blockquote>
<p>g 部署，s –debug 本地调试，现在本地测试没问题就可以提交到git仓库了,本地测试： <a href="http://0.0.0.0:4000/" target="_blank" rel="external">http://0.0.0.0:4000/</a><br>不出意外，本地测试没有问题，下面就要提交到git了,依次输入命令如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<blockquote>
<p>这个时候在浏览器中输入： <a href="http://wljdev.github.io" target="_blank" rel="external">http://wljdev.github.io</a>  就可以访问到本地站点了，和本地测试是一样的。</p>
</blockquote>
<hr>
<h2 id="git绑定域名"><a href="#git绑定域名" class="headerlink" title="git绑定域名"></a>git绑定域名</h2><blockquote>
<p>接着在本地Hexo的文件夹中的source文件夹中创一个文件名为 CNAME 记住没有任何后缀，里面内容就写你的域名，比我的的域名为 www.wanglijun.vip  就这样，没别的内容。（这里我再说下，网上有别的博客说在git仓库中创建一个CNAME的文件，然后再下载到本地拷贝到source文件夹中，这种方式不是不可以，只是不觉得麻烦吗，直接在本地创建，提交上去就完事了。）<br>进入到自己买的域名网站的管理平台，如下我的事阿里云域名，直接按照如图所示更改即可。<br>修改完后记得启动，基本上就算搭建完成了，这时候直接在浏览器中输入<a href="http://www.wanglijun.vip" target="_blank" rel="external">http://www.wanglijun.vip</a> 就可以访问我的网站了,有时候可能要等一会才行。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2659145-016f773411512018.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名地址绑定图"></p>
<hr>
<blockquote>
<p>那么，到此git + Hexo + 域名绑定 算是完成了，关于Hexo主题设置，页面优化还有很多，以后再给大家慢慢更新。</p>
</blockquote>
<p><strong><em> 看在我这么辛苦的份上，你好意思不打赏吗</em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;如今可谓是全民编程时代，生活在北上广这样的城市里，感觉每天遇见的每一个背电脑包的都像是个程序员，那么多程序员，如果自己没有什么优势的话，很快你就会被这个时代所抛弃，有一个自己的博客，记录自己工作中遇到的问题，总结自己的工作，不论是以后找工作，还是复习之前的知识，博客记录都是一种很好的方式，那你可能会说了，不是有csdn、开源中国、简书等等，可是这些都太普通了，作为程序员的我们，怎么能没有自己的博客呢。&lt;br&gt;那么我今天以我的个人博客搭建为例(&lt;a href=&quot;http://www.wanglijun.vip&quot;&gt;http://www.wanglijun.vip&lt;/a&gt;) 教大家一步步搭建好自己的博客。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>RxAndroid/RxJava之初识RxAndroid简单方法示例</title>
    <link href="http://yoursite.com/2016/08/07/RxAndroidRxJava%E4%B9%8B%E5%88%9D%E8%AF%86RxAndroid%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95%E7%A4%BA%E4%BE%8B/"/>
    <id>http://yoursite.com/2016/08/07/RxAndroidRxJava之初识RxAndroid简单方法示例/</id>
    <published>2016-08-07T04:18:08.000Z</published>
    <updated>2016-08-12T13:57:40.999Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava ?"></a>RxJava ?</h3><blockquote>
<p><code>RxJava</code> 主要的作用就是链式完成异步操作,并且非常强大，RxJava最核心的两个东西是<code>Observables</code>（被观察者，事件源）和<code>Subscribers</code>（订阅者）。<code>Observables</code>发出一系列事件，<code>Subscribers</code>处理这些事件。<br><a id="more"></a></p>
</blockquote>
<h3 id="RxAndroid"><a href="#RxAndroid" class="headerlink" title="RxAndroid?"></a>RxAndroid?</h3><blockquote>
<p><code>RxAndroid</code>主要的作用也是异步，随意定制主线程、子线程的操作，链式编程，让我们的代码可读性大大增强，总之，是非常好用。</p>
</blockquote>
<p><strong>我们在开始之前肯定还是要先导包的</strong><br>第一种方式：如果你是用<code>android studio</code>可以直接在<code>build.gradle</code>中添加依赖</p>
<blockquote>
<p>compile ‘io.reactivex:rxandroid:1.2.1’<br>compile ‘io.reactivex:rxjava:1.1.6’</p>
</blockquote>
<p>第二种方式：如果你的网络不好，或者公司要求开发用禁网，那么请直接下载<code>jar</code>包放在<code>libs</code>目录中，看下<code>jar</code>包位置，顺便看看目录结构（本文中用的jar包版本不是最新的，忽略）<br><img src="http://upload-images.jianshu.io/upload_images/2659145-1889247ee34028da?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"></p>
<blockquote>
<p>先来看下我们的一个需求以及实现这个需求我们用<code>Rxjava</code>是怎么来书写的</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2659145-f6deaad3c50189cf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"></p>
<blockquote>
<p>怎么样，上面这样看起来是不是很爽，一目了然地感觉，一眼就知道都执行了什么方法，对于一些大的项目，难以维护的项目，这样的方式编程，就算以后需要维护，我想比起以前的<code>if</code>、<code>for</code>嵌套要好很多吧</p>
</blockquote>
<p><strong>好了，废话不多说，看主要代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> wlj.com.rxandroid;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"></div><div class="line"><span class="keyword">import</span> rx.Observable;</div><div class="line"><span class="keyword">import</span> rx.Subscriber;</div><div class="line"><span class="keyword">import</span> rx.functions.Action1;</div><div class="line"><span class="keyword">import</span> rx.functions.Func1;</div><div class="line"><span class="keyword">import</span> rx.schedulers.Schedulers;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * rxandroid 练习</div><div class="line"> * rxjava 练习</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> wlj</div><div class="line"> * <span class="doctag">@date</span> 2016/8/5</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line">    String[] names = &#123;<span class="string">"111"</span>, <span class="string">"222"</span>, <span class="string">"333"</span>&#125;;</div><div class="line">    String[][] arrs = &#123;&#123;<span class="string">"11"</span>, <span class="string">"12"</span>&#125;, &#123;<span class="string">"21"</span>, <span class="string">"22"</span>&#125;, &#123;<span class="string">"31"</span>, <span class="string">"32"</span>&#125;&#125;;</div><div class="line">    String[] nums = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"6"</span>&#125;;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> savedInstanceState</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"><span class="comment">//        ObservableCreate();</span></div><div class="line"><span class="comment">//        ObservableSimple();</span></div><div class="line"><span class="comment">//        ObservableJust();</span></div><div class="line"><span class="comment">//        ObservableRange();</span></div><div class="line"><span class="comment">//        ObservableThread();</span></div><div class="line"><span class="comment">//        ObservableMap();</span></div><div class="line"><span class="comment">//        ObservableFrom();</span></div><div class="line"><span class="comment">//        ObservableFlatMap();</span></div><div class="line"><span class="comment">//        ObservableFilter();</span></div><div class="line"><span class="comment">//        ObservableTake();</span></div><div class="line">        ObservableTest();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * rxandroid 练习</div><div class="line">     * 需求：</div><div class="line">     * 1 给出任意一组数字字符串数组</div><div class="line">     * 2 去的重复的数字</div><div class="line">     * 3 得到大于1的数字</div><div class="line">     * 4 只保留前三位</div><div class="line">     * 5 运行在子线程中</div><div class="line">     * 6 进行输出</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ObservableTest</span><span class="params">()</span> </span>&#123;</div><div class="line">        Observable.from(nums)</div><div class="line">                .map(<span class="keyword">new</span> Func1&lt;String, Integer&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> Integer.parseInt(s);</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .distinct()</div><div class="line">                .filter(<span class="keyword">new</span> Func1&lt;Integer, Boolean&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> integer &gt; <span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .take(<span class="number">3</span>)</div><div class="line">                .observeOn(Schedulers.newThread())</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                        Log.d(TAG, <span class="string">" 当前数字为："</span> + integer);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * take 截取前面几个元素</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ObservableTake</span><span class="params">()</span> </span>&#123;</div><div class="line">        Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>).take(<span class="number">4</span>).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"当前数字为："</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * filter 过滤我们不想要的值</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ObservableFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        Observable</div><div class="line">                .just(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">100</span>)</div><div class="line">                .filter(<span class="keyword">new</span> Func1&lt;Integer, Boolean&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> integer &gt; <span class="number">5</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                        Log.d(TAG, <span class="string">"当前数字为："</span> + integer);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 遍历双列的集合数组方式</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ObservableFlatMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        Action1&lt;String&gt; action1 = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.d(TAG, s);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        Observable</div><div class="line">                .from(arrs)</div><div class="line">                .flatMap(<span class="keyword">new</span> Func1&lt;String[], Observable&lt;String&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(String[] strings)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> Observable.from(strings);</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribe(action1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line">   * 引用</div><div class="line">   */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ObservableFrom</span><span class="params">()</span> </span>&#123;</div><div class="line">        Observable</div><div class="line">                .from(names)</div><div class="line">                .map(<span class="keyword">new</span> Func1&lt;String, String&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="string">"我是："</span> + s;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                        Log.d(TAG, s);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ObservableMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        Action1&lt;String&gt; action1 = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.d(TAG, s);</div><div class="line">                Log.d(TAG, Thread.currentThread().getName());</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        Observable</div><div class="line">                .just(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">                .map(<span class="keyword">new</span> Func1&lt;Integer, String&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> integer.toString();</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .observeOn(Schedulers.newThread())</div><div class="line">                .subscribe(action1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 调度的使用</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ObservableThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        Observable&lt;String&gt; observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"你被调用了 ："</span> + Thread.currentThread().getName());</div><div class="line">                subscriber.onNext(<span class="string">"你被调用了1"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        Action1 action1 = <span class="keyword">new</span> Action1() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"主人有什么吩咐："</span> + Thread.currentThread().getName());</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        observable</div><div class="line">                .observeOn(Schedulers.newThread())</div><div class="line">                .subscribe(action1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ObservableRange</span><span class="params">()</span> </span>&#123;</div><div class="line">        Observable.range(<span class="number">0</span>, <span class="number">10</span>).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"call :"</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ObservableJust</span><span class="params">()</span> </span>&#123;</div><div class="line">        Observable.just(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"call : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 简单用法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ObservableSimple</span><span class="params">()</span> </span>&#123;</div><div class="line">        Observable&lt;String&gt; mObservable = Observable.just(<span class="string">"主人下午好"</span>);</div><div class="line">        mObservable.subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.d(TAG, s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 复杂用法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ObservableCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//创建一个观察者</span></div><div class="line">        <span class="keyword">final</span> Subscriber&lt;String&gt; mSubscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.d(TAG, s);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="comment">//创建被观察者</span></div><div class="line"></div><div class="line">        Observable&lt;String&gt; mObservable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">                mSubscriber.onNext(<span class="string">"下午好"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//被观察者绑定观察者</span></div><div class="line">        mObservable.subscribe(mSubscriber);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>最后列出一些简单的方法属性</strong></p>
<blockquote>
<p><code>observables</code>     被观察者（事件源）<br><code>subscribers</code>  观察者<br><code>schedulers</code>   子线程、主线程切换的调度     器，<code>schedulers.newThread()</code> 在子线程中执行，<code>schedulers.mainThread()</code>在主线程中执行，还有<code>io()</code>,<code>computation()</code>,<code>immediate()</code><br><code>map</code> 用来操作<code>observable</code>和最终的<code>subscriber</code>之间修改observable发出事件的类型，比如发出类型为<code>int</code>类型，最终为<code>String</code>类型，中间用<code>map</code>来转换<br><code>from</code> 能够达到遍历数组的效果，将数组中的元素依次显示<br><code>filter</code> 得到大于或者小于某个数的值<br><code>take</code>得到前几位值<br><code>takelast</code>得到后几位值<br><code>deitinct</code> 对一个值只处理一次</p>
</blockquote>
<p>当然还有很多，在我们业务需求用到的时候，直接查询然后再项目中使用即可。</p>
<blockquote>
<p>ps 如果觉得对你有用，不妨点赞、打赏、顶一下，谢谢对我创作的支持</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RxJava&quot;&gt;&lt;a href=&quot;#RxJava&quot; class=&quot;headerlink&quot; title=&quot;RxJava ?&quot;&gt;&lt;/a&gt;RxJava ?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;RxJava&lt;/code&gt; 主要的作用就是链式完成异步操作,并且非常强大，RxJava最核心的两个东西是&lt;code&gt;Observables&lt;/code&gt;（被观察者，事件源）和&lt;code&gt;Subscribers&lt;/code&gt;（订阅者）。&lt;code&gt;Observables&lt;/code&gt;发出一系列事件，&lt;code&gt;Subscribers&lt;/code&gt;处理这些事件。&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Activity的生命周期</title>
    <link href="http://yoursite.com/2016/08/07/Activity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2016/08/07/Activity的生命周期/</id>
    <published>2016-08-07T02:32:08.000Z</published>
    <updated>2016-08-12T13:57:39.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-、概述"><a href="#一-、概述" class="headerlink" title="一 、概述"></a>一 、概述</h2><blockquote>
<p>当用户在系统与你的应用之间切换的过程中，你的应用中的Activity实例也会在自己的不同生命周期中切换。例如，用户第一次打开你的应用，应用展现在用户的手机桌面，获取用户的输入焦点。在这个过程中，Android系统调用了你的Activity中的一系列的生命周期方法，这些方法建立了应用组建和用户之间的联系。如果用户启动了应用中的另外一个Activity，或者直接切换到另外一个应用，系统也调用了Activity生命周期中的一系列方法使应用可以在后台运行。</p>
</blockquote>
<p>ps:下图为activity执行生命周期流程图<br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/2659145-4e23cfa0e9cfe15e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="activity生命周期图"><br>ps:如果你想详细了解activity的生命周期，下面是Android官网链接<a href="https://developer.android.com/intl/zh-cn/guide/components/activities.html" target="_blank" rel="external">https://developer.android.com/intl/zh-cn/guide/components/activities.html</a></p>
<h2 id="二-、方法"><a href="#二-、方法" class="headerlink" title="二 、方法"></a>二 、方法</h2><h3 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate()"></a>onCreate()</h3><p>当Acitivity第一次被创建时触发，一般在这里要做的事情包括创建视图（setContentView()），最重要是在里面调用setContentView，还可以在里面初始化各控件、设置监听、并初始化一些全局的变量。因为在Activity的一次生命周期中，onCreate方法只会执行一次。在Paused和Stopped状态下恢复或重启的下，这些控件、监听和全局变量也不会丢失。即便是内存不足，被回收了，再次Recreate的话，又是一次新的生命周期的开始，又会执行onCreate方法。还可以在onCreate执行数据操作，比如从Cursor中检索数据等等，但是如果你每次进入这个Activity都可能需要更新数据，那么最好放在onStart里面。</p>
<h3 id="onRestart"><a href="#onRestart" class="headerlink" title="onRestart()"></a>onRestart()</h3><p>这个我比较少用到，按文档上的介绍，如果Activity之前被stop过，那么下一次onStart()方法之前会先触发这个方法。</p>
<h3 id="onStart"><a href="#onStart" class="headerlink" title="onStart()"></a>onStart()</h3><p>只要Activity从不可见变成可见，就会触发到这个方法，但被AlertDialog遮挡/显示的情况不算在内。</p>
<h3 id="onResume"><a href="#onResume" class="headerlink" title="onResume()"></a>onResume()</h3><p>当Activity来到最上层的时候，也就是开始与用户直接交互时，触发这个方法。例如本来Activity被一个AlertDialog遮挡，当这个AlertDialog消失时，onResume()方法就被触发。</p>
<h3 id="onPause"><a href="#onPause" class="headerlink" title="onPause()"></a>onPause()</h3><p>onPause()和onResume()的触发条件刚好相反，如果Activity本来在最上层，当它要让出最上层的位置时会触发这个方法。onPause()和onResume()<br>是被触发最频繁的两个方法，所以在这里不应该执行过于消耗资源的方法。</p>
<h3 id="onStop"><a href="#onStop" class="headerlink" title="onStop()"></a>onStop()</h3><p>当有其他Activity覆盖了当前Activity时，不论另一个Activity是新开始的还是从下层移至最上层的，当前Activity的onStop()方法都会被触发。</p>
<h3 id="onDestroy"><a href="#onDestroy" class="headerlink" title="onDestroy()"></a>onDestroy()</h3><p>Activity生命周期的终点。有两种情况会导致它被触发：1)执行了Activity#finish()方法；2)Android系统由于资源不足等原因决定杀掉Activity所在进程。通过isFinishing()方法可以判断出是哪种情况。在这个方法里，我们一般要做的事情是释放Activity占有的资源，例如后台正在进行的下载线程等等。</p>
<h2 id="三-、实例代码"><a href="#三-、实例代码" class="headerlink" title="三 、实例代码"></a>三 、实例代码</h2><p>我们来做一个简单的代码，看看activity在A B两个界面中跳转是如果执行这些方法的在A的activity中有一个按钮，点击之后会跳转到B的activity中然后，我们再在B的activity中点击手机上面的物理按键中的返回键，看看这两个activity都执行了什么样的方法，以及他们执行的顺序是什么样的。</p>
<blockquote>
<p>A activity的代码 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    System.out.println(<span class="string">"A--------"</span> + <span class="string">"onCreate"</span>);</div><div class="line">    findViewById(R.id.bun).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(getApplicationContext(), Main2Activity.class);</div><div class="line">            startActivity(intent);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onStart();</div><div class="line">    System.out.println(<span class="string">"A--------"</span> + <span class="string">"onStart"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onRestart();</div><div class="line">    System.out.println(<span class="string">"A--------"</span> + <span class="string">"onRestart"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onResume();</div><div class="line">    System.out.println(<span class="string">"A--------"</span> + <span class="string">"onResume"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onPause();</div><div class="line">    System.out.println(<span class="string">"A--------"</span> + <span class="string">"onPause"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onStop();</div><div class="line">    System.out.println(<span class="string">"A--------"</span> + <span class="string">"onStop"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        System.out.println(<span class="string">"A--------"</span> + <span class="string">"onDestroy"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>B activity的代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main2Activity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main2);</div><div class="line">    System.out.println(<span class="string">"B--------"</span> + <span class="string">"onCreate"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onRestart();</div><div class="line">    System.out.println(<span class="string">"B--------"</span> + <span class="string">"onRestart"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onStart();</div><div class="line">    System.out.println(<span class="string">"B--------"</span> + <span class="string">"onStart"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onResume();</div><div class="line">    System.out.println(<span class="string">"B--------"</span> + <span class="string">"onResume"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onPause();</div><div class="line">    System.out.println(<span class="string">"B--------"</span> + <span class="string">"onPause"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onStop();</div><div class="line">    System.out.println(<span class="string">"B--------"</span> + <span class="string">"onStop"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        System.out.println(<span class="string">"B--------"</span> + <span class="string">"onDestroy"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>那么到此，我们可以清楚的看到下面执行打印的结果，值得提醒的是，如果你的手机中在 开发者选项中开启了 不保留活动设置的话，那就是用户离开后销毁每一个activity，所以当用户离开A后，肯定也会执行onDestroy方法 </p>
</blockquote>
<h4 id="当我们初次启动A界面的时候执行的方法"><a href="#当我们初次启动A界面的时候执行的方法" class="headerlink" title="当我们初次启动A界面的时候执行的方法"></a>当我们初次启动A界面的时候执行的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">05</span>-<span class="number">07</span> <span class="number">15</span>:<span class="number">09</span>:<span class="number">50.796</span> <span class="number">26398</span>-<span class="number">26398</span>/com.wlj.demo1 I/System.out: A--------onCreate</div><div class="line"><span class="number">05</span>-<span class="number">07</span> <span class="number">15</span>:<span class="number">09</span>:<span class="number">50.798</span> <span class="number">26398</span>-<span class="number">26398</span>/com.wlj.demo1 I/System.out: A--------onStart</div><div class="line"><span class="number">05</span>-<span class="number">07</span> <span class="number">15</span>:<span class="number">09</span>:<span class="number">50.799</span> <span class="number">26398</span>-<span class="number">26398</span>/com.wlj.demo1 I/System.out: A--------onResume</div></pre></td></tr></table></figure>
<h4 id="点击了界面上的按钮，开始跳转到B界面中执行的方法"><a href="#点击了界面上的按钮，开始跳转到B界面中执行的方法" class="headerlink" title="点击了界面上的按钮，开始跳转到B界面中执行的方法"></a>点击了界面上的按钮，开始跳转到B界面中执行的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">点击了界面上的按钮，开始跳转到B界面中执行的方法</div><div class="line"><span class="number">05</span>-<span class="number">07</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">11.927</span> <span class="number">26398</span>-<span class="number">26398</span>/com.wlj.demo1 I/System.out: A--------onPause</div><div class="line"><span class="number">05</span>-<span class="number">07</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">11.967</span> <span class="number">26398</span>-<span class="number">26398</span>/com.wlj.demo1 I/System.out: B--------onCreate</div><div class="line"><span class="number">05</span>-<span class="number">07</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">11.968</span> <span class="number">26398</span>-<span class="number">26398</span>/com.wlj.demo1 I/System.out: B--------onStart</div><div class="line"><span class="number">05</span>-<span class="number">07</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">11.969</span> <span class="number">26398</span>-<span class="number">26398</span>/com.wlj.demo1 I/System.out: B--------onResume</div><div class="line"><span class="number">05</span>-<span class="number">07</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">12.394</span> <span class="number">26398</span>-<span class="number">26398</span>/com.wlj.demo1 I/System.out: A--------onStop</div></pre></td></tr></table></figure>
<h4 id="在B界面按下返回键执行了方法"><a href="#在B界面按下返回键执行了方法" class="headerlink" title="在B界面按下返回键执行了方法"></a>在B界面按下返回键执行了方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">在B界面按下返回键执行了方法</div><div class="line"><span class="number">05</span>-<span class="number">07</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">15.001</span> <span class="number">26398</span>-<span class="number">26398</span>/com.wlj.demo1 I/System.out: B--------onPause</div><div class="line"><span class="number">05</span>-<span class="number">07</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">15.019</span> <span class="number">26398</span>-<span class="number">26398</span>/com.wlj.demo1 I/System.out: A--------onRestart</div><div class="line"><span class="number">05</span>-<span class="number">07</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">15.021</span> <span class="number">26398</span>-<span class="number">26398</span>/com.wlj.demo1 I/System.out: A--------onStart</div><div class="line"><span class="number">05</span>-<span class="number">07</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">15.021</span> <span class="number">26398</span>-<span class="number">26398</span>/com.wlj.demo1 I/System.out: A--------onResume</div><div class="line"><span class="number">05</span>-<span class="number">07</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">15.431</span> <span class="number">26398</span>-<span class="number">26398</span>/com.wlj.demo1 I/System.out: B--------onStop</div><div class="line"><span class="number">05</span>-<span class="number">07</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">15.431</span> <span class="number">26398</span>-<span class="number">26398</span>/com.wlj.demo1 I/System.out: B--------onDestroy</div></pre></td></tr></table></figure>
<blockquote>
<p>ps:以上这些就是简单的对activity生命周期的梳理，欢迎指正。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-、概述&quot;&gt;&lt;a href=&quot;#一-、概述&quot; class=&quot;headerlink&quot; title=&quot;一 、概述&quot;&gt;&lt;/a&gt;一 、概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;当用户在系统与你的应用之间切换的过程中，你的应用中的Activity实例也会在自己的不同生命周期中切换。例如，用户第一次打开你的应用，应用展现在用户的手机桌面，获取用户的输入焦点。在这个过程中，Android系统调用了你的Activity中的一系列的生命周期方法，这些方法建立了应用组建和用户之间的联系。如果用户启动了应用中的另外一个Activity，或者直接切换到另外一个应用，系统也调用了Activity生命周期中的一系列方法使应用可以在后台运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ps:下图为activity执行生命周期流程图&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
</feed>
